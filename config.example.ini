[obs]
; The URL to connect your local OBS instance.
; Unless your local instance is actually remote (ex. when using ngrok),
; and that OBS instance is using the default configuration that comes with
; the WebSocket feature, this probably doesn't need to change.
server_url=ws://127.0.0.1:4455

; The password to connect your local OBS instance.
; Check your OBS instance for the password, with 
; Tools > WebSocket Server Settings.
server_password=Set me, please! (or set to empty if your local OBS instance is passwordless)

; The scene in where elements will be screenshotted in your local OBS instance
sources_scene=Stream Sources

; Setting this to 1 DISABLES a workaround for an internal bug in OBS.
; where sources are reversed. The default 0 will sort alphanumerically.
; If you wish to use OBS's ordering given via WebSockets, set this to 1.
; https://github.com/obsproject/obs-websocket/issues/1034
use_default_sources_sort=0

; How many frames per second is the stream source going at?
; This is useful for...
framerate=60
; Round framerate changes to framerate. Set to 0 to disable.
round_delays_to_framerate=1

[image]
; By default, this program and its provided scene collection and profiles,
; are tuned towards 1920x1200 OBS output resolutions. If your output resolution
; is different, this may cause QR code issues. Consider enabling screenshot_allow
; if you plan on testing different base canvases, and view the images.
fetch_image_width=384
fetch_image_height=240

; The quality of image that will be sent over WebSockets.
fetch_compression_quality=100

; What image format should be used for remote OBS instances
; to create, then send over WebSockets?
; png is generally recommended.
image_format=png

; These values let you set variables such as rect_left and rect_width
; via ratios, based on fetched screenshot resolutions.
; 
; For example, if you wanted to the left and top of the rectangle crop
; to start at the middle of the screen, to the bottom-right corner,
; with absolute pixel values at 960x600 it'd look like this:
;
; 	rect_left=480
;	rect_top=300
;	rect_width=480
; 	rect_height=300
; 
; This breaks if you were to change the fetch_image_width or fetch_image_height
; to a different resolution like 1920x1200, even with the same aspect ratio.
; To remedy this, you can do this instead:
; 
;	rect_left_ratio=.5		; 960px * .5 = 480px (our new rect_left value)
;	rect_top_ratio=.5		; 540px * .5 = 300px (our new rect_top value)
;	rect_width_ratio=.5		; 960px * .5 = 480px (our new rect_width value)
; 	rect_height_ratio=.5	; 540px * .5 = 300px (our new rect_height value)
;
; If you plan to tweak these values, you may consider enabling screenshot_allow,
; for easier debugging on if your crop is correct.
rect_left_ratio=
rect_top_ratio=
rect_width_ratio=
rect_height_ratio=

; Where to set the starting anchor
; on the screenshot image, in absolute pixels.
; Ratios can be used instead of absolute pixels, however.
rect_left=
rect_top=
; How large the rectangle's width and height
; will be to crop with, in absolute pixels.
; Ratios can be used instead of absolute pixels, however.
rect_width=
rect_height=

; Should screenshots that this program internally takes,
; be able to save to disk? This will make the program
; ask the user if they wish to save screenshots.
; Set to 1 to enable.
screenshot_allow=0

; Uses day.js formatting for filename formatting. {name} is custom.
; See https://day.js.org/docs/en/display/format;docsNav
screenshot_filename_formatting=[Screenshot {name}] YYYY-MM-DD HH-mm-ss

[logging]
; Log debugging? Set to 1 to enable.
; Has some debugging information, if something goes wrong.
debug_log=0
; Log timing? Set to 1 to enable.
; Useful for optimizing the screenshot generation time and image size
; over WebSockets, which is needed for getting the QR code in order to time sync.
time_log=0
